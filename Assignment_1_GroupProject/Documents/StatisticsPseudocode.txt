# Pseudocode for Statistics<T> Class Functions

# minimum
FUNCTION minimum()
    IF array is null THEN
        THROW error "Array not initialized"
    IF array is empty THEN
        THROW error "Dataset is empty"
    RETURN first element of array
END FUNCTION

# maximum
FUNCTION maximum()
    IF array is null THEN
        THROW error "Array not initialized"
    IF array is empty THEN
        THROW error "Dataset is empty"
    RETURN last element of array
END FUNCTION

# range
FUNCTION range()
    IF array is null THEN
        THROW error "Array not initialized"
    IF array is empty THEN
        THROW error "Dataset is empty"
    IF array size < 2 THEN
        THROW error "Requires at least 2 data values"
    RETURN maximum() - minimum()
END FUNCTION

# size
FUNCTION size()
    RETURN number of elements in array
END FUNCTION

# sum
FUNCTION sum()
    IF array is null THEN
        THROW error "Array not initialized"
    IF array is empty THEN
        THROW error "Dataset is empty"
    SET total = 0
    FOR each element in array
        ADD element to total
    END FOR
    RETURN total
END FUNCTION

# sumPowSub
FUNCTION sumPowSub(exponent, subtractValue)
    IF array is null THEN
        THROW error "Array not initialized"
    IF array is empty THEN
        THROW error "Dataset is empty"
    SET total = 0
    FOR each element in array
        ADD (element - subtractValue)^exponent to total
    END FOR
    RETURN total
END FUNCTION

# sumPowSubDiv
FUNCTION sumPowSubDiv(exponent, subtractValue, divisor)
    IF array is null THEN
        THROW error "Array not initialized"
    IF array is empty THEN
        THROW error "Dataset is empty"
    SET total = 0
    FOR each element in array
        ADD ((element - subtractValue) / divisor)^exponent to total
    END FOR
    RETURN total
END FUNCTION

# mean
FUNCTION mean()
    IF array is null THEN
        THROW error "Array not initialized"
    IF array is empty THEN
        THROW error "Dataset is empty"
    IF array size < 2 THEN
        THROW error "Requires at least 2 data values"
    RETURN sum() / size()
END FUNCTION

# median
FUNCTION median()
    IF array is null THEN
        THROW error "Array not initialized"
    IF array is empty THEN
        THROW error "Dataset is empty"
    IF array size is even THEN
        SET index1 = size / 2
        SET index2 = index1 - 1
        RETURN (array[index1] + array[index2]) / 2
    ELSE
        RETURN array[size / 2]
    END IF
END FUNCTION

# mode
FUNCTION mode()
    IF array is null THEN
        THROW error "Array not initialized"
    IF array is empty THEN
        THROW error "Dataset is empty"
    SET maxCount = 0
    SET modeValue = -1
    SET count = 1
    FOR index = 1 to size - 1
        IF array[index] equals array[index - 1] THEN
            INCREMENT count
        ELSE
            SET count = 1
        END IF
        IF count > maxCount THEN
            SET maxCount = count
            SET modeValue = array[index]
        END IF
    END FOR
    RETURN modeValue
END FUNCTION

# standardDeviation
FUNCTION standardDeviation()
    IF array is null THEN
        THROW error "Array not initialized"
    IF array is empty THEN
        THROW error "Dataset is empty"
    IF array size < 2 THEN
        THROW error "Requires at least 2 data values"
    SET variance = sumPowSub(2, mean()) / (size() - datasetType)
    RETURN square_root(variance)
END FUNCTION

# variance
FUNCTION variance()
    IF array is null THEN
        THROW error "Array not initialized"
    IF array is empty THEN
        THROW error "Dataset is empty"
    IF array size < 2 THEN
        THROW error "Requires at least 2 data values"
    RETURN sumPowSub(2, mean()) / (size() - datasetType)
END FUNCTION

# midrange
FUNCTION midrange()
    IF array is null THEN
        THROW error "Array not initialized"
    IF array is empty THEN
        THROW error "Dataset is empty"
    IF array size < 2 THEN
        THROW error "Requires at least 2 data values"
    RETURN (minimum() + maximum()) / 2
END FUNCTION

# quartilesCalculation
FUNCTION quartilesCalculation()
    SET n = size()
    IF n = 0 THEN
        PRINT "Dataset is empty"
        RETURN
    IF n = 1 THEN
        PRINT "Requires at least 2 data values"
        RETURN
    SET Q2 = median()
    SET Q1 = 0, q1Known = false
    SET lowerHalf = n / 2
    IF lowerHalf >= 2 THEN
        SET q1Known = true
        IF lowerHalf is odd THEN
            SET Q1 = array[lowerHalf / 2]
        ELSE
            SET Q1 = (array[lowerHalf / 2 - 1] + array[lowerHalf / 2]) / 2
        END IF
    END IF
    SET Q3 = 0, q3Known = false
    IF n is even THEN
        SET upperStart = n / 2
    ELSE
        SET upperStart = n / 2 + 1
    END IF
    SET upperHalf = n - upperStart
    IF upperHalf >= 2 THEN
        SET q3Known = true
        IF upperHalf is odd THEN
            SET Q3 = array[upperStart + upperHalf / 2]
        ELSE
            SET Q3 = (array[upperStart + upperHalf / 2 - 1] + array[upperStart + upperHalf / 2]) / 2
        END IF
    END IF
    RETURN {Q1, Q2, Q3, q1Known, q3Known}
END FUNCTION

# quartiles
FUNCTION quartiles()
    SET q = quartilesCalculation()
    PRINT "Quartiles:"
    IF q.q1Known THEN
        PRINT "Q1 = ", q.Q1
    ELSE
        PRINT "Q1 = unknown"
    END IF
    PRINT "Q2 = ", q.Q2
    IF q.q3Known THEN
        PRINT "Q3 = ", q.Q3
    ELSE
        PRINT "Q3 = unknown"
    END IF
END FUNCTION

# interquartile
FUNCTION interquartile()
    SET n = size()
    SET q = quartilesCalculation()
    IF n < 4 THEN
        PRINT "Interquartile Range = unknown"
    ELSE
        PRINT "Interquartile Range = ", q.Q3 - q.Q1
    END IF
END FUNCTION

# outliers
FUNCTION outliers()
    SET q = quartilesCalculation()
    SET IQR = q.Q3 - q.Q1
    SET upperFence = q.Q3 + 1.5 * IQR
    SET lowerFence = q.Q1 - 1.5 * IQR
    SET hasOutlier = false
    PRINT "Outliers = "
    FOR each element in array
        IF element < lowerFence OR element > upperFence THEN
            PRINT element
            SET hasOutlier = true
        END IF
    END FOR
    IF NOT hasOutlier THEN
        PRINT "None"
    END IF
END FUNCTION

# sumOfSquares
FUNCTION sumOfSquares()
    SET n = size()
    IF n < 2 THEN
        PRINT "Sum of Squares = unknown"
        RETURN
    END IF
    SET m = mean()
    SET sos = sumPowSub(2, m)
    PRINT "Sum of Squares = ", sos
END FUNCTION

# meanAbsoluteDeviation
FUNCTION meanAbsoluteDeviation()
    SET n = size()
    IF n < 2 THEN
        PRINT "Mean Absolute Deviation = unknown"
        RETURN
    END IF
    SET m = mean()
    SET mad = 0
    FOR each element in array
        ADD absolute(element - m) to mad
    END FOR
    SET mad = mad / n
    PRINT "Mean = ", m
    PRINT "Mean Absolute Deviation = ", mad
END FUNCTION

# rootMeanSquare
FUNCTION rootMeanSquare()
    SET n = size()
    IF n < 2 THEN
        PRINT "Root Mean Square = unknown"
        RETURN
    END IF
    SET squaredSum = 0
    FOR each element in array
        ADD element^2 to squaredSum
    END FOR
    SET rms = square_root(squaredSum / n)
    PRINT "Root Mean Square = ", rms
END FUNCTION

# standardErrorMean
FUNCTION standardErrorMean()
    SET n = size()
    IF n < 2 THEN
        PRINT "Standard Error of the Mean = unknown"
        RETURN
    END IF
    SET s = standardDeviation()
    SET sem = s / square_root(n)
    PRINT "Standard Error of the Mean = ", sem
END FUNCTION

# skewness
FUNCTION skewness()
    IF array is null THEN
        THROW error "Array not initialized"
    IF array is empty THEN
        THROW error "Dataset is empty"
    IF array size < 3 THEN
        THROW error "Requires at least 3 data values"
    IF datasetType is sample THEN
        SET n = size()
        SET fraction = n / ((n - 1) * (n - 2))
        RETURN fraction * sumPowSubDiv(3, mean(), standardDeviation())
    ELSE
        RETURN sumPowSub(3, mean()) / (size() * standardDeviation()^3)
    END IF
END FUNCTION

# kurtosis
FUNCTION kurtosis()
    IF array is null THEN
        THROW error "Array not initialized"
    IF array is empty THEN
        THROW error "Dataset is empty"
    IF array size < 4 THEN
        THROW error "Requires at least 4 data values"
    IF datasetType is sample THEN
        SET n = size()
        SET fraction = (n * (n + 1)) / ((n - 1) * (n - 2) * (n - 3))
        RETURN fraction * sumPowSubDiv(4, mean(), standardDeviation())
    ELSE
        RETURN sumPowSub(4, mean()) / (size() * standardDeviation()^4)
    END IF
END FUNCTION

# kurtosisExcess
FUNCTION kurtosisExcess()
    IF array is null THEN
        THROW error "Array not initialized"
    IF array is empty THEN
        THROW error "Dataset is empty"
    IF array size < 4 THEN
        THROW error "Requires at least 4 data values"
    IF datasetType is sample THEN
        SET n = size()
        SET fractionL = (n * (n + 1)) / ((n - 1) * (n - 2) * (n - 3))
        SET fractionR = (3 * (n - 1)^2) / ((n - 2) * (n - 3))
        SET sum = fractionL * sumPowSubDiv(4, mean(), standardDeviation())
        RETURN sum - fractionR
    ELSE
        RETURN sumPowSub(4, mean()) / (size() * standardDeviation()^4) - 3
    END IF
END FUNCTION

# coefficientOfVariation
FUNCTION coefficientOfVariation()
    IF array is null THEN
        THROW error "Array not initialized"
    IF array is empty THEN
        THROW error "Dataset is empty"
    IF array size < 2 THEN
        THROW error "Requires at least 2 data values"
    RETURN standardDeviation() / mean()
END FUNCTION

# relativeStandardDeviation
FUNCTION relativeStandardDeviation()
    IF array is null THEN
        THROW error "Array not initialized"
    IF array is empty THEN
        THROW error "Dataset is empty"
    RETURN absolute((standardDeviation() / mean()) * 100)
END FUNCTION

# displayFrequencyTable
FUNCTION displayFrequencyTable()
    CREATE empty frequency map
    FOR each element in array
        INCREMENT frequency of element in map
    END FOR
    PRINT header "Value Frequency Frequency%"
    FOR each value, count in frequency map
        PRINT value, count, (count / size()) * 100
    END FOR
    RETURN frequency map
END FUNCTION


// THIS WAS A PAIN I REFUSE TO EVER DO THIS AGAIN...
// JZ - ALL STAT FUNCS EXCEPT L-R
